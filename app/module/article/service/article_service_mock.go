// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bangadam/go-fiber-starter/app/module/article/service (interfaces: ArticleService)

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"

	request "github.com/bangadam/go-fiber-starter/app/module/article/request"
	response "github.com/bangadam/go-fiber-starter/app/module/article/response"
	paginator "github.com/bangadam/go-fiber-starter/utils/paginator"
	gomock "github.com/golang/mock/gomock"
)

// MockArticleService is a mock of ArticleService interface.
type MockArticleService struct {
	ctrl     *gomock.Controller
	recorder *MockArticleServiceMockRecorder
}

// MockArticleServiceMockRecorder is the mock recorder for MockArticleService.
type MockArticleServiceMockRecorder struct {
	mock *MockArticleService
}

// NewMockArticleService creates a new mock instance.
func NewMockArticleService(ctrl *gomock.Controller) *MockArticleService {
	mock := &MockArticleService{ctrl: ctrl}
	mock.recorder = &MockArticleServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArticleService) EXPECT() *MockArticleServiceMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockArticleService) All(arg0 request.ArticlesRequest) ([]*response.Article, paginator.Pagination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", arg0)
	ret0, _ := ret[0].([]*response.Article)
	ret1, _ := ret[1].(paginator.Pagination)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// All indicates an expected call of All.
func (mr *MockArticleServiceMockRecorder) All(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockArticleService)(nil).All), arg0)
}

// Destroy mocks base method.
func (m *MockArticleService) Destroy(arg0 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Destroy indicates an expected call of Destroy.
func (mr *MockArticleServiceMockRecorder) Destroy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockArticleService)(nil).Destroy), arg0)
}

// Show mocks base method.
func (m *MockArticleService) Show(arg0 uint64) (*response.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Show", arg0)
	ret0, _ := ret[0].(*response.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Show indicates an expected call of Show.
func (mr *MockArticleServiceMockRecorder) Show(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Show", reflect.TypeOf((*MockArticleService)(nil).Show), arg0)
}

// Store mocks base method.
func (m *MockArticleService) Store(arg0 request.ArticleRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockArticleServiceMockRecorder) Store(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockArticleService)(nil).Store), arg0)
}

// Update mocks base method.
func (m *MockArticleService) Update(arg0 uint64, arg1 request.ArticleRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockArticleServiceMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockArticleService)(nil).Update), arg0, arg1)
}
