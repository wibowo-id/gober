// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bangadam/go-fiber-starter/app/module/article/repository (interfaces: ArticleRepository)

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"

	schema "github.com/bangadam/go-fiber-starter/app/database/schema"
	request "github.com/bangadam/go-fiber-starter/app/module/article/request"
	paginator "github.com/bangadam/go-fiber-starter/utils/paginator"
	gomock "github.com/golang/mock/gomock"
)

// MockArticleRepository is a mock of ArticleRepository interface.
type MockArticleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockArticleRepositoryMockRecorder
}

// MockArticleRepositoryMockRecorder is the mock recorder for MockArticleRepository.
type MockArticleRepositoryMockRecorder struct {
	mock *MockArticleRepository
}

// NewMockArticleRepository creates a new mock instance.
func NewMockArticleRepository(ctrl *gomock.Controller) *MockArticleRepository {
	mock := &MockArticleRepository{ctrl: ctrl}
	mock.recorder = &MockArticleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArticleRepository) EXPECT() *MockArticleRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockArticleRepository) Create(arg0 *schema.Article) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockArticleRepositoryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockArticleRepository)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockArticleRepository) Delete(arg0 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockArticleRepositoryMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockArticleRepository)(nil).Delete), arg0)
}

// FindOne mocks base method.
func (m *MockArticleRepository) FindOne(arg0 uint64) (*schema.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOne", arg0)
	ret0, _ := ret[0].(*schema.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOne indicates an expected call of FindOne.
func (mr *MockArticleRepositoryMockRecorder) FindOne(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockArticleRepository)(nil).FindOne), arg0)
}

// GetArticles mocks base method.
func (m *MockArticleRepository) GetArticles(arg0 request.ArticlesRequest) ([]*schema.Article, paginator.Pagination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArticles", arg0)
	ret0, _ := ret[0].([]*schema.Article)
	ret1, _ := ret[1].(paginator.Pagination)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetArticles indicates an expected call of GetArticles.
func (mr *MockArticleRepositoryMockRecorder) GetArticles(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArticles", reflect.TypeOf((*MockArticleRepository)(nil).GetArticles), arg0)
}

// Update mocks base method.
func (m *MockArticleRepository) Update(arg0 uint64, arg1 *schema.Article) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockArticleRepositoryMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockArticleRepository)(nil).Update), arg0, arg1)
}
